/*
 * esp8266.h
 *
 *  Created on: Aug 23, 2023
 *      Author: hojin
 */

#ifndef INC_ESP8266_H_
#define INC_ESP8266_H_

#include <stdint.h>
//#define ESP8266_HOSTNAME	"\"ODAS\""
#define ESP8266_DEFAULTIP	"\"192.168.4.111\""
#define ESP8266_GATEWAY "\"192.168.4.1\""
#define ESP8266_SUBNETMASK "\"255.255.255.0\""
#define ESP8266_PORT 333
#define ESP8266_CWMODE 3
#define ESP8266_CIPMUX 1
#define ESP8266_STRCMD_LEN 200
#define ESP8266_WAIT_RESPOND_TIME 100
#define ESP8266_INTERVAL_COMM 10

#define ESP8266_WIFI_ID_LEN                 32
#define ESP8266_WIFI_PWD_LEN                12


enum
{
	ESP8266_DATA_SEND_STATUS_NONE,
    ESP8266_DATA_SEND_STATUS_RESET  = 0x802D, // 1바이트 값이 '\r'되는 값을 피해준다.
	ESP8266_DATA_SEND_STATUS_SAVE_VERSION,
    ESP8266_DATA_SEND_STATUS_LOAD_VERSION,
    ESP8266_DATA_SEND_STATUS_STATUS,
    ESP8266_DATA_SEND_STATUS_DOWNLINK_UPLOAD_WAVE,
    ESP8266_DATA_SEND_STATUS_DOWNLINK_UPLOAD_OFFSET_A,
    ESP8266_DATA_SEND_STATUS_DOWNLINK_UPLOAD_OFFSET_B,
	ESP8266_DATA_SEND_STATUS_DOWNLINK_UPLOAD_ALARM,
    ESP8266_DATA_SEND_STATUS_DOWNLINK_LOAD_WAVE,
    ESP8266_DATA_SEND_STATUS_DOWNLINK_LOAD_OFFSET_A,
    ESP8266_DATA_SEND_STATUS_DOWNLINK_LOAD_OFFSET_B,
	ESP8266_DATA_SEND_STATUS_DOWNLINK_LOAD_ALARM,
	ESP8266_DATA_SEND_STATUS_DOWNLINK_SET_ALARM_LIMIT,
	ESP8266_DATA_SEND_STATUS_DOWNLINK_SET_BOUNDARY_OFFSET,
	ESP8266_DATA_SEND_STATUS_UPLINK_UPLOAD_WAVE,
	ESP8266_DATA_SEND_STATUS_UPLINK_UPLOAD_OFFSET_A,
	ESP8266_DATA_SEND_STATUS_UPLINK_UPLOAD_OFFSET_B,
	ESP8266_DATA_SEND_STATUS_UPLINK_UPLOAD_ALARM,
	ESP8266_DATA_SEND_STATUS_UPLINK_LOAD_WAVE,
	ESP8266_DATA_SEND_STATUS_UPLINK_LOAD_OFFSET_A,
	ESP8266_DATA_SEND_STATUS_UPLINK_LOAD_OFFSET_B,
	ESP8266_DATA_SEND_STATUS_UPLINK_LOAD_ALARM,
	ESP8266_DATA_SEND_STATUS_UPLINK_SET_ALARM_LIMIT,
	ESP8266_DATA_SEND_STATUS_UPLINK_SET_BOUNDARY_OFFSET,
    ESP8266_DATA_SEND_STATUS_LOAD_DATA,
    ESP8266_DATA_SEND_STATUS_OPTSW_DOWN,
    ESP8266_DATA_SEND_STATUS_OPTSW_UP,
    ESP8266_DATA_SEND_STATUS_SET_CHANNEL,
	ESP8266_DATA_SEND_STATUS_SET_MAXDATALEN,
    ESP8266_DATA_SEND_STATUS_SET_ATT,
	ESP8266_DATA_SEND_STATUS_RESET_ATT,
    ESP8266_DATA_SEND_STATUS_SAVE,
	ESP8266_DATA_SEND_STATUS_SAVE_NETWORKINFO,
	ESP8266_DATA_SEND_STATUS_LOAD_NETWORKINFO,
    ESP8266_DATA_SEND_STATUS_LEN
};

typedef struct
{
	uint16_t data_send_status;
}ESP8266_GLOBAL_VAR;

typedef struct
{
    uint16_t Cmd;
    uint8_t ID[ESP8266_WIFI_ID_LEN];
    uint8_t Pwd[ESP8266_WIFI_PWD_LEN];
    //uint8_t Gateway[4];
    uint8_t IP[4];
    //uint8_t SubnetMask[4];
}ESP8266_NETWORK_BUF;


extern void esp8266_send_cmd(const char *strcmd);
extern void esp8266_send_data(uint8_t *data, size_t size);
extern void esp8266_start(uint8_t val);
extern void esp8266_init(void);
extern void esp8266_startserver_TCP(void);
extern void esp8266_ready_send_TCP(uint8_t id, uint16_t size);
extern void esp8266_set_networkinfo(uint8_t* wifi_id, uint8_t* wifi_pwd, uint8_t ip);

extern ESP8266_GLOBAL_VAR g_esp8266;
extern ESP8266_NETWORK_BUF esp8266_NETWORK;

#endif /* INC_ESP8266_H_ */
